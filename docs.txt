* What is Framework
-> A framework is a set of conceptual structure and guidelines, used to build something useful.

A framework may include predefined classes and functions that can be used to process input, manage hardware devices, and interact with system software.

The purpose of the framework is to allow developers to focus on building a unique feature for their project rather than writing code from scratch.

* Why use Framework
->      1. Collection of tools
	2. No need to start from scratch
	3. Save time
	4. Improve productivity
	5. Clean code
	6. Reusable code
	7. Testing
	8. Debugging

* Web Framework
-> Web framework helps to build web applications

Web frameworks provide tools and libraries to simplify common web development operations. This can include web servies, APIs and other resources.

Web frameworks help with a variety of tasks, from templating and database access to session management and code reuse

More than 80% of all web app frameworks rely on the Model View Controller architecture

* Model View Template(MVT)
-> MVT is an design pattern that seperates an application into three main logical components Model, View and Template

MODEL responsible to handle database. It is a data access layer which handles the data

User can send request by interacting with TEMPLATE, the VIEW handles these requests and sends to MODEL then get appropriate response from the MODEL, sends response to TEMPLATE. VIEW may also have required logics. And it works as a mediator between TEMPLATE and MODEL.

TEMPLATE represent how data should be presented to the application user. User can read or write the data from TEMPLATE. Basically it is responsible for showing end user content, we can say it is user interface. It may consists of HTML, CSS and JavaScript mixed with Django Template language(Jinja2)

* Why use MVT
->      1. Organized code
	2. Independent block
	3. Reduces the complexity of web applications
	4. Easy to maintain
	5. Easy to modify

* Environment setup and good practices
->      1. Install python if not in your machine. (One time). You can download official python or Anaconda.
	2. Create a project folder.
		$ mkdir <Project Name>
	3. Go to your project folder.
		$ cd <Project Name>
	4. Create a virtual environment to avoid unwanted circumstances. (Once for each project)
		$ python -m venv <Virtual Environment Name>
	5. Activate your virtual environment. (Everytime you want to work on your project)
		$ source <Virtual Environment Name>/bin/activate
		or in windows > <Virtual Enviroment Name>\Scripts\activate
	6. Install django. (Once for each virtual environment)
		$ pip install django
	7. Create core django functionality of your project.
		$ django-admin startproject core .
	8. Create an application for your project.
		$ python manage.py startapp <App Name>

		project structure:
			<Project Name>
			    |-- core
			    |   |-- __pycache__
			    |   |-- __init__.py
			    |   |-- asgi.py
			    |   |-- settings.py
			    |   |-- urls.py
			    |   |-- wsgi.py
			    |-- <App Name>
			    |   |-- migrations
			    |   |-- __init__.py
			    |   |-- admin.py
			    |   |-- apps.py
			    |   |-- models.py
			    |   |-- tests.py
			    |   |-- views.py
			    |-- <Virtual Environment Name>
			    |-- manage.py
	9. Install the app in your core/settings.py file
		INSTALLED_APPS = [
			...,
			...,
			<App Name>.apps.<App Name>Config, # Second <App Name>'s first letter capitalized
			# Or simply
			<App Name>,
		]
	10. Run your project development server.
		$ python manage.py runserver
	11. Deactivate your virtual environment after finishing work.
		$ deactivate

* Create Function based view. (Act as Controller of MVC)
-> Function based view is a python function that takes a web request(HttpRequest) and return a web response(HttpResponse)

This response can be the HTML contents of a web page or redirect or a 404 error or an XML document or an image or anything.(HttpResponse Object)

Each view function takes an HttpRequest object as its first parameter.

The view returns an HttpResponse object that contains the generated response. Each view function is responsible for returning an HttpResponse object

We will call these function as view function or view function of application or simply view

Views are defined in views.py file which may contain business logic of the application like this

	from django.http import HttpResponse
	def function_name(<HttpRequest Object Name>):
		# process logic and data, and bind with HttpResponse Object
		return HttpResponse(<HttpResponse Object>)

* URL-conf: URL dispatcher or URL pattern
-> To design URLs for app, create a python module informally named urls.py. This module is pure python code and is a mapping between URL path expressions to view functions.

This mapping can be as short or as long as needed.

It can reference other mappings.

It's pure python code so it can be constructed dynamically.

* URL pattern inside project vs URL pattern inside app
-> Creating a urls.py file for every App gives us Plug&Play feature to reuse our App for other project.
URL pattern inside project increases the dependency of applications in project which means if we want to use a particular application for our another project we may face issues.
Our each application should be independent or less depend on project so we could use our applications in different projects easily without worrying about urls.py available in project folder.
Following are the benefits of defining url pattern inside application
	1. Reduces the dependency of application
	2. Enhance application performance
	3. Reusability of application becomes easy

Basic syntax of urls.py file
	from django.urls import path
	from <App Name> inport views
	urlpatterns = [
		path(route, view, kwargs, name),
	]

django.urls.path -> it returns an element for inclusion in urlpatterns
route -> This argument should be a string or gettext_lazy() that contains a URL pattern. The string may contain angle brackets e.g. <KeywordName> to capture part of the URL and send it as a keyword a argument to the view. The angle brackets may include a converter specification like the int(integer) part of <int:id> which limits the characters matched and may also change the type of the variable passed to the view. For example, <int:id> matches a string of decimal number and converts the value to an int.
view -> This argument is a view function(views.<function_name>) or the result of as_view() for class-based views. It can also be an django.urls.include().
kwargs -> This argument allows to pass additional arguments to the view function. It should be a dictionary.
name -> This argument is used to perform URL reversing.

django.urls.include -> Used to include URLconf module(urls.py) of an application to the project URLconf module(urls.py). It also accepts as an argument either an iterable that return URL patterns or a 2-tuple containing such iterable plus the names of the application namespaces.

Basic configurations of core.urls
		from django.urls import include, path
		urlpatterns = [
			path('<App Name>/', include('<App Name>.urls'), namespace),
			# OR can be include list of paths
			path('<category>/', include(<list of paths>)),
			# OR also include list of paths with namespace
			path('<category>/', include(<list of paths>, app_namespace), namespace),
		]
		where,
			module -> URLconf module(urls.py)
			namespaces(str) -> Instance namespace for the URL entries being included
			<list of paths> -> Iterable of path() and/or re_path() instances
			app_namespaces(str) -> Application namespace for the URL entries being included

By default there is no urls.py file inside application, to do so
	$ touch <App Name>/urls.py

* Rendering TEMPLATE file
-> A template is a text file. It can be generated to any text-based format(HTML, XML, CSV etc).
A template contains variables, which get replaced with values when the template is evaluated, and tags which control the logic of the template.
Template is used by view function to represent the data to user.
User sends request to view then view contact template afterthat view get information from the template and then view gives response to the users.
django.shortcuts.render function combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text.
We write business login inside view.py and presentation inside template file(html). Still views.py will be responsible to process the template file that so we use render function.
Function based view rendering template file syntax
	from django.shortcuts import render
	def function_name(request):
		return render(request, '<template file>', context, content_type, status, using)
	where,
		request -> The HttpRequest object used to generate this response. 
		<template file> -> Template file with path. If only file name provided then by default render search a folder named "templates" in every app and return the first found file
		context -> Dictionary of values to add to the template context. By default this is an empty dictionary. If a value in the dictionary is callable, the view will call it just before rendering the template.
		content_type -> The MIME type to use for the resulting document. Default to 'text/html'
		status -> The status code for the response. Default to 200
		using -> The NAME of a template engine to use for loading the template

* Creating templates folder to store template file
-> templates inside project vs templates inside app
By default django.shortcuts.render search every app for a folder named "templates" and try match with provided template file name and if it is matched then the file is rendered using jinja2 render engine(which is embedded with django by default).
App specific template file inside templates folder
	$ mkdir <App Name>/templates
	$ mkdir <App Name>/templates/<App Name>
	$ touch <App Name>/templates/<App Name>/<File Name>.html

App specific template file provides Plug&Play feature, but sometime we need to include some common feature all over the applications. To do so we need to create templates folder inside project and configure core.settings file.
	$ pwd
	  <project folder>
	$ mkdir templates
	
	configure core.settings
	.
	.
	TEMPLATES = [
		{
			...,
			'DIRS' : [BASE_DIR / 'templates'],
			...,
		},
	]
	.
	.

* Dynamic Template Files using Dynamic Template Language(DTL)
-> django.shortcuts.render function uses jinja2 like(django's embedded engine) render engine to render html file with dynamic data provided.
	TEMPLATES = [
    		{
        	    'BACKEND': 'django.template.backends.django.DjangoTemplates',
		    ...
		    # if we want to use jinja2 then replace it with
		    'BACKEND': 'django.template.backends.jinja2.Jinja2',

		    # Before that install jinja2 to your virtual environment like this in your terminal
		    #    $ pip install jinja2
    		},
	]
Dynamic data can be passed to django.shortcuts.render function as context data which is a dictionary of (key, value) pairs. The keys are accessable to the html file using Dynamic Template Language. As django uses jinja2 engine language here is a some syntax of that language:


Variables -> Variables look like this : {{<variable>}} When the template engine encounters a variable, it evaluates that variable(key) and replaces it with the result(value)
	rules :
		@ Variable names consists of any combination of alphanumeric characters and the underscore
		@ Variable name should not start with underscore
		@ Variable name can not have spaces or punctuation characters
		@ Syntax : {{<variable>}}
		@ Example :
			{{name}}, {{description}}


Filters -> When we need to modify variable before displaying we can filters. Pipe '|' is used to apply filter.
		@ Syntax : {{<variable>|<filter>}}
		@ Example :
			{{name|upper}} -> all the character of name will be uppercase
Some of filters take arguments.
		@ Syntax : {{<variable>|<filter:argument>}}
		@ Example :
			{{article|truncatewords:40}}
Filter can be chained.
		@ Syntax : {{<variable>|filter1|filter2|...}}
		@ Example :
			{{article|upper|truncatewords:40}}
Some common filter :
capfirst -> It capitalizes the first chacter of the value. If the first character is not a letter, this filter has no effect
	@ Example :
		{{name|capfirst}}
default -> If value evaluates to False, uses the given default. Otherwise, uses the value.
	@ Example :
		{{value|default:"nothing"}}
length -> It returns the length of the value. This works for both strings and lists. The filter return 0 for an undefined variable
	@ Example :
		{{value|length}}
lower -> It converts a string into all lowercase
	@ Example :
		{{value|lower}}
upper -> It converts a string into all uppercase
	@ Example :
		{{value|upper}}
slice -> It returns a slice of the list. Uses the same syntax as python's list slicing
	@ Example :
		{{some_list|slice:":2"}} -> show first two element
truncatechars -> It truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character("..."). Argument : Number of characters to truncate to
	@ Example :
		{{value|truncatechars:7}}
truncatewords -> It truncates a string after a certain number of words. Newlines within the string will be removed. Argument : Number of words to truncate to
	@ Example :
		{{value|truncatewords:5}}
date -> It formats a date according to the given format.
	@ Example :
		{{value|date:"D d M Y"}}
time -> It formats a time according to the given format.
	@ Example :
		{{value|time:"H:i"}}

	Format Character			Description					Example

						Day

	d			Day of the month, 2 digits with leadin zeros			01 to 31
	j			Day of the month without leading zeros				1 to 31
	D			Day of the week, textual, 3 letters				Fri
	l			Day of the week, textual, long					Friday
	S			English ordinal suffix for day of the month, 2 characters	st, nd, rd or th
	w			Day of the week, digits without leading zeros			0(Sunday) to 6(Saterday)
	z			Day of the year							1 to 366

						Week

	W			ISO-8601 week number of year, with weeks starting on monday	1, 53
						Month
	m			Month, 2 digits with leading zeros				01 to 12
	n			Month without leading zero					1 to 12
	M			Month, textual, 3 letters					Jan
	b			Month, textual, 3 letters, lower				jan
	E			Month, locale specific alternative representation
				usually used for long date representation			"listopada" (for polish locale, as opposed to "Listopad")
	F			Mont, textual, long						January
	N			Month abbreviation in associated press style.
				Proprietary extension						Jan, Feb, March, May
	t			Number of days in the given month				28 to 31

						Year

	y			Year, 2 digits							99
	Y			Year, 4 digits							1999
	L			Boolean for wheter it's a leap year				True or False
	o			ISO-8601 week-numbering year, corresponding to the
				ISO-8601 week number(W) which uses leap weeks. See
				Y for the more common year format				1999

						Time

	g			Hour, 12-hour format without leading zeros			1 to 12
	G			Hour, 24-hour format without leading zeros			0 to 23
	h			Hour, 12-hour format						01 to 12
	H			Hour, 24-hour format						00 to 23
	i			Minutes								00 to 59
	s			Seconds, 2 digits with leadin zeros				00 to 59
	u			Microseconds							000000 to 999999
	a			"a.m" or "p.m"							a.m, p.m
	A			"AM" or "PM"							AM, PM
	f			Time, in 12-hours and minutes, with minutes left off
				if they're zero. Proprietary extension				1, 1:30
	P			Time, in 12-hour hours, minutes and "a.m" or "p.m",
				with minutes left off if they're zero and the special-
				case strings "midnight" or "noon" if appropriate. Pro-
				pritary extension						1 a.m., 1:30 p.m., midnight, noon, 12:30 p.m.

						Timezone

	e			Timezone name. Could be in any format, or might return
				an empty string, depending on the datetime			",'GMT','-500','US/Eastern',etc
	I			Dayligth saving time, whether it's in effect or not		1 or 0
	O			Differnce to greenwich time in hours				+0200
	T			Timezone of this machine					EST, MDT
	Z			Timezone offset in seconds. The offset for timezones
				west of UTC is always negative, and for those cast of
				UTC is always positive						-43200 to 43200

						Date/Time

	c			ISO 8601 format(Note: unlike others formatters, such
				as "Z","O" or "r", the "c" formatter will not add
				timezone offset if value is a naive datetime)			2008-01-02T10:30:00.000123+02, or 2008-01-02T10:30:00.000123 if the datetime is naive
	r			RFC 5322 formatted date						'Thu, 21 Dec 2000 16:01:07 +0200'
	U			Seconds since the Unix epoch(January 1 1970 00:00:00 UTC)	2374297397

						Predefined formats

	DATE_FORMAT		Default: 'N j, Y'						Feb. 9, 2020
	DATETIME_FORMAT		Default: 'N j, Y, P'						Feb. 9, 2020, 10 p.m.
	SHORT_DATE_FORMAT	Default: 'm/d/Y'						12/31/2020
	SHORT_DATETIME_FORMAT	Default: 'm/d/Y P'						12/31/2020 4 p.m.
	TIME_FORMAT		Default: 'H:i'							"01:24"

	@ Example:
		{{value|date:"SHORT_DATE_FORMAT"}}
		{{value|time:"TIME_FORMAT"}}
floatformat -> It format a floating point number to decimal place. Argument : 
		if argument, n < 0 -> place n digit after floating point if needed
		if argument, n = 0 -> rounds up to nearest number
		if argument, n > 0 -> place n digit after floating point
		if no argument is passed then place one digit after floating point if needed

		@ Example :
			{{number|floatformat}}
			{{number|floatformat:-3}}
			{{number|floatformat:0}}
			{{number|floatformat:3}}


Tags -> This is a way to write sudo python code to process and control data.
	@ Syntax :
		{% <tagname> %}
			...
			...
		{% end<tagname> %}
	@ Example :
		{%if true%}
			...
		{%endif%}

if tag -> The {%if%} tag evaluates a variable, if that variable is "true"(i.e. exists, is not empty, and is not false boolean value)
	@ Syntax :
		{% if <expression or value> %}
			...
		{% elif <expression or value> "%}
			...
		{% else %}
			...
		{% endif %}
	we can use "and", "or", "not", "is", "==" operation within if tag
	@ Example :
		{% if name is "amous" %}
                        ...
                {% elif name is "souma"%}
                        ...
                {% else %}
                        ...
                {% endif %}

Dot(.) lookup -> Technically, when the template system encounters a dot, it tries the following lookups, in this order :
		1. Dictionary lookup
		2. Attribute or method lookup
		3. Numeric index lookup
for tag -> the {%for%} tag is used for iterate over objects.
	@ Syntax :
		{% for <iterator> %}
			...
		{% empty %}
			# work when the iterator is empty
		{% endfor %}
	@ Example :
		{% for variable in variable %}
			...
		{% endfor %}
				Predefined forloop varibles
		   Variables					Description

		forloop.counter					The current iteration of the loop (1-indexed)
		forloop.counter0				The current iteration of the loop (0-indexed)
		forloop.revcounter				The number of iterations from the end of the loop (1-indexed)
		forloop.revcounter0				The number of iterations from the end of the loop (0-indexed)
		forloop.first					True if this is the first time through the loop
		forloop.last					True if this is the last time through th loop
		forloop.parentloop				For nested loops, this is the loop surrounding the current one

